//TIME EXECUTION 
#include <stdio.h>
#include<time.h>
void main() {
    int i;
    clock_t start,end;
    double cpu_time_used;
    clrscr();
    start=clock();
    for(i=0;i<10;i++) {
        printf("Hello\n");
    }
    end=clock();
    cpu_time_used=((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Execution time :%f seconds",cpu_time_used);
    getch();
}


// LINEAR SEARCH 
#include<stdio.h>
#include<time.h>
void main() {
int arr[10],i,n,c,found=0;
clock_t start,end;
double cpu_time_used;
clrscr();
start=clock();
printf("Enter n:");
scanf("%d",&n);
printf("Enter Array of %d element:",n);
for(i=0;i<n;i++) {
scanf("%d",&arr[i]);
  }
printf("Enter search element c:");
scanf("%d",&c);
for(i=0;i<n;i++) {
   if(arr[i]==c) {
     printf("Element %d found in the position %d",c,i+1);
     found=1;
     break;
     }
   }
 if(!found) {
 printf("Element %d not found",c);    }
 end=clock();
 cpu_time_used=((double)(end - start))/ CLOCKS_PER_SEC;
 printf("\nExecution time: %f seconds",cpu_time_used);
 getch(); }


//RECURSIVE LINEAR SEARCH 
#include<stdio.h>
#include<time.h>
int rls(int arr[],int size,int key,int index) {
 if(index>=size)
   return -1;
 if(arr[index]==key)
    return index;
 return rls(arr,size,key,index+1);
 }
 int main() {
 int n=10000;
 int arr[10];
 int result,i;
 int key=9999;
 clock_t start,end;
 double cpu_time_used;
 for(i=0;i<n;i++) {
 arr[i]=i;
 }
 start=clock();
 result= rls(arr,n,key,0);
 end=clock();
 cpu_time_used=((double)(end - start))/CLOCKS_PER_SEC;
 if(result!=-1)
 printf("Element found at index%d/n",result);
 else
 printf("Element bot found");
 printf("Execution time: %f seconds",cpu_time_used);
 return 0;
 }


//RECURSIVE BINARY SEARCH 
#include<stdio.h>
#include<time.h>
int rbs(int arr[],int low,int high,int key) {
 int mid=low+(high-low)/2;
    if(high<low)
      return -1;
    if(arr[mid]==key)
      return mid;
    else if(arr[mid]>key)
      return rbs(arr,low,mid-1,key);
    else
      return rbs(arr,mid+1,high,key);
 }
 int main() {
 int n=10000;
 int arr[10];
 int i,result;
 int key=9999;
 clock_t start,end;
 double cpu_time_used;
 for(i=0;i<n;i++) {
 arr[i]=i;
 }
 start=clock();
 result= rbs(arr,0,n-1,key);
 end=clock();
 cpu_time_used=((double)(end - start))/CLOCKS_PER_SEC;
 if(result!= -1)
  printf("Element forund at index %d",result);
 else
  printf("Element not found");
 printf("Execution time: %f seconds",cpu_time_used);
 return 0;
 }


// BINARY SEARCH 
#include<stdio.h>
#include<time.h>
int bs(int arr[],int n,int key) {
  int low=0,high=n-1,mid;
  while(low<=high)
    mid=(high+low)/2;
   if(arr[mid]==key)
    return mid;
   else if(arr[mid]<key)
    low=mid+1;
   else
    high=mid-1;
 return -1;
 }
 int main() {
 int n=10;
 int arr[10];
 int result,i;
 int key=9;
 clock_t start,end;
 double cpu_time_used;
 for(i=0;i<n;i++) {
 arr[i]=i;
 }
 start=clock();
 result= bs(arr,n,key);
 end=clock();
 cpu_time_used=((double)(end - start))/CLOCKS_PER_SEC;
 if(result!= -1)
  printf("Element found at index%d\n",result);
 else
  printf("Element not found");
 printf("Execution time: %f seconds",cpu_time_used);
 return 0;
 }


